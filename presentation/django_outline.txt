make dir, go into it

django-admin startproject mysite

makes:

mysite/		project container, rename to whatever
    manage.py	cmd line utility (for admin)
    mysite/		project directory, Python package name
        __init__.py	empty file, shows this is a Python package
        settings.py	project settings/config
        urls.py	"table of contents"
        asgi.py	for ASGI-compatible web servers
        wsgi.py	for WSGI-compatible web servers

rp-portfolio/
│
├── personal_portfolio/
│   ├── personal_portfolio/
│   │   ├── __init__.py
│   │   ├── settings.py
│   │   ├── urls.py
│   │   └── wsgi.py
│   │
│   └── manage.py
│
└── venv/

python manage.py runserver

http://127.0.0.1:8000/

add an app called "polls" as a top level module:

python manage.py startapp polls

makes:

polls/
    __init__.py
    admin.py
    apps.py
    migrations/
        __init__.py
    models.py
    tests.py
    views.py

============================
Views:
polls/views.py¶
from django.http import HttpResponse

def index(request):
    return HttpResponse("Hello, world. You're at the polls index.")

============================
URLs:
polls/urls.py¶
from django.urls import path

from . import views

urlpatterns = [
    path('', views.index, name='index'),
]

============================
URLconf:
mysite/urls.py¶
from django.contrib import admin
from django.urls import include, path

urlpatterns = [
    path('polls/', include('polls.urls')),		# route, view
    path('admin/', admin.site.urls),
]

python manage.py migrate			# create tables for INSTALLED_APPS

Create two models:
polls/models.py¶
from django.db import models

class Question(models.Model):
    question_text = models.CharField(max_length=200)
    pub_date = models.DateTimeField('date published')

class Choice(models.Model):
    question = models.ForeignKey(Question, on_delete=models.CASCADE)
    choice_text = models.CharField(max_length=200)
    votes = models.IntegerField(default=0)

======
Include the app in the project:
mysite/settings.py¶
INSTALLED_APPS = [
    'polls.apps.PollsConfig',
    ....

python manage.py makemigrations polls		# store model changes as a migration
[python manage.py sqlmigrate polls 0001		# see what it will do]
python manage.py migrate			# run the migrations -- create the model tables

1. change models in models.py
2. python manage.py makemigrations # to create migrations for the changes
3. python manage.py migrate # to apply the changes to the db

========
Add string method:
polls/models.py¶
from django.db import models

class Question(models.Model):
    # ...
    def __str__(self):
        return self.question_text

